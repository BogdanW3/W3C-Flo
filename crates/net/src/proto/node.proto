syntax = "proto3";
package flo_node;

import "proto/common.proto";

message PacketControllerConnect {
  flo_common.Version lobby_version = 1;
  string secret = 2;
}

message PacketControllerConnectAccept {
  flo_common.Version version = 1;
}

message PacketControllerConnectReject {
  ControllerConnectRejectReason reason = 1;
}

enum ControllerConnectRejectReason {
  ControllerConnectRejectReasonUnknown = 0;
  ControllerConnectRejectReasonControllerVersionTooOld = 1;
  ControllerConnectRejectReasonInvalidSecretKey = 2;
}

message PacketControllerCreateGame {
  Game game = 1;
}

message PacketControllerCreateGameAccept {
  int32 game_id = 1;
  repeated PlayerToken player_tokens = 2;
}

message PacketControllerCreateGameReject {
  int32 game_id = 1;
  ControllerCreateGameRejectReason reason = 2;
}

message PacketControllerUpdateSlotStatus {
  int32 game_id = 1;
  int32 player_id = 2;
  flo_common.SlotClientStatus status = 3;
}

message PacketControllerUpdateSlotStatusAccept {
  int32 game_id = 1;
  int32 player_id = 2;
  flo_common.SlotClientStatus status = 3;
}

message PacketControllerUpdateSlotStatusReject {
  int32 game_id = 1;
  int32 player_id = 2;
  UpdateSlotClientStatusRejectReason reason = 3;
}

message PacketControllerQueryGameStatus {
  repeated int32 game_ids = 1;
}

message PacketNodeGameStatusUpdateBulk {
  repeated PacketNodeGameStatusUpdate games = 1;
}

message PacketNodeGameStatusUpdate {
  int32 game_id = 1;
  NodeGameStatus status = 2;
  map<int32, flo_common.SlotClientStatus> updated_player_game_client_status_map = 3;
}

message PacketClientConnect {
  flo_common.Version version = 1;
  bytes token = 2;
}

message PacketClientConnectAccept {
  flo_common.Version version = 1;
  int32 game_id = 2;
  int32 player_id = 3;
  NodeGameStatus game_status = 4;
  map<int32, flo_common.SlotClientStatus> player_game_client_status_map = 5;
}

message PacketClientConnectReject {
  ClientConnectRejectReason reason = 1;
  string message = 2;
}

message PacketClientUpdateSlotClientStatusRequest {
  flo_common.SlotClientStatus status = 3;
}

message PacketClientUpdateSlotClientStatus {
  int32 player_id = 1;
  int32 game_id = 2;
  flo_common.SlotClientStatus status = 3;
}

message PacketClientUpdateSlotClientStatusReject {
  int32 player_id = 1;
  int32 game_id = 2;
  UpdateSlotClientStatusRejectReason reason = 3;
}

enum ClientConnectRejectReason {
  ClientConnectRejectReasonUnknown = 0;
  ClientConnectRejectReasonInvalidToken = 1;
  ClientConnectRejectReasonMulti = 2;
  ClientConnectRejectReasonMaintenance = 3;
}

enum ControllerCreateGameRejectReason {
  ControllerCreateGameRejectReasonUnknown = 0;
  ControllerCreateGameRejectReasonGameExists = 1;
  ControllerCreateGameRejectReasonPlayerBusy = 2;
  ControllerCreateGameRejectReasonMaintenance = 3;
}

enum UpdateSlotClientStatusRejectReason {
  UpdateSlotClientStatusRejectReasonUnknown = 0;
  UpdateSlotClientStatusRejectReasonNotFound = 1;
  UpdateSlotClientStatusRejectReasonInvalidStatus = 2;
  UpdateSlotClientStatusRejectReasonMaintenance = 3;
}

message PlayerToken {
  int32 player_id = 1;
  bytes token = 2;
}

message Game {
  int32 id = 1;
  NodeGameStatus status = 2;
  GameSettings settings = 3;
  repeated GameSlot slots = 4;
}

enum NodeGameStatus {
  NodeGameStatusCreated = 0;
  NodeGameStatusWaiting = 1;
  NodeGameStatusLoading = 2;
  NodeGameStatusRunning = 3;
  NodeGameStatusEnded = 4;
}

message GameSettings {
  string map_path = 1;
  bytes map_sha1 = 2;
  uint32 map_checksum = 3;
}

message GamePlayer {
  int32 player_id = 1;
  string name = 2;
}

message GameSlot {
  uint32 id = 1;
  GamePlayer player = 2;
  flo_common.SlotSettings settings = 3;
  flo_common.SlotClientStatus client_status = 4;
}